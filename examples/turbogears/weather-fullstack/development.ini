#
# weather-fullstack - TurboGears 2 development environment configuration
#
# The %(here)s variable will be replaced with the parent directory of this file
#
# This file is for deployment specific config options -- other configuration
# that is always required for the app is done in the config directory,
# and generally should not be modified by end users.

[DEFAULT]
# WARNING: *THE LINE BELOW MUST BE FALSE ON A PRODUCTION ENVIRONMENT*
# Debug mode will enable the interactive debugging tool, allowing ANYONE to
# execute malicious code after an exception is raised.
debug = false

# ERROR REPORTING BY EMAIL
# Uncomment to enable email error reporting, you probably want this
# on production to receive application crashes by email
#trace_errors.error_email = you@yourdomain.com
trace_errors.from_address = turbogears@localhost
trace_errors.smtp_server = localhost

# Uncomment if email server requires authentication
#trace_errors.smtp_use_tls = true
#trace_errors.smtp_username = unknown
#trace_errors.smtp_password = unknown

# Uncomment to enable additional context data for email error reporting
#trace_errors.dump_request = true
#trace_errors.dump_local_frames = true

# ERROR REPORTING TO SENTRY
# Uncomment to enable reporting errors to a Sentry server
#trace_errors.sentry_dsn = http://public:secret@example.com/1

# REPORT SLOW REQUESTS
#trace_slowreqs.enable = true
#trace_slowreqs.interval = 25
#trace_slowreqs.exclude = /tw2/resources

[server:main]
use = egg:gearbox#wsgiref
host = 127.0.0.1
port = 8000

[app:main]
use = egg:weather-fullstack

# Default application language, when available this will be
# used when none of the browser requested languages is available.
#i18n.lang = en

cache_dir = %(here)s/data
session.key = weather_fullstack
session.secret = f9a6a628-ef0c-4a85-aa73-62a449e669f9

#By default session is store in cookies to avoid the overhead
#of having to manage a session storage. On production you might
#want to switch to a better session storage.
session.type = cookie
session.validate_key = f9a6a628-ef0c-4a85-aa73-62a449e669f9

# If you'd like to fine-tune the individual locations of the cache data dirs
# un-comment the desired settings here:
#cache.data_dir = %(here)s/data/cache

# Disable template autoreload to boost performances in production
# WARNING: if you want to deploy your application using a zipped egg
# (ie: if your application's setup.py defines zip-safe=True, then you
# MUST put "false" for the production environment because there will
# be no disk and real files to compare time with.
#auto_reload_templates = false

# Turn off static files serving from public/ directory
# this can be a speed boost if you have a proxy server already
# serving them for you.
#serve_static = false

#turn this setting to "min" if you would like tw to produce minified
#javascript files (if your library supports that)
toscawidgets.framework.resource_variant=debug

# pick the form for your database
# %(here) may include a ':' character on Windows environments; this can
# invalidate the URI when specifying a SQLite db via path name
# sqlalchemy.url=postgres://username:password@hostname:port/databasename
# sqlalchemy.url=mysql://username:password@hostname:port/databasename


# If you have sqlite, here's a simple default to get you started
# in development

sqlalchemy.url = sqlite:///%(here)s/devdata.db
#echo shouldn't be used together with the logging module.
sqlalchemy.echo = false
sqlalchemy.echo_pool = false
sqlalchemy.pool_recycle = 3600

# This line ensures that Genshi will render xhtml when sending the
# output. Change to html or xml, as desired.
templating.genshi.method = xhtml
templating.genshi.doctype = html5

# This might be required to make Genshi work on Python3.4
#templating.genshi.name_constant_patch = true

# the compiled template dir is a directory that must be readable and writable
# by your webserver. It will be used to store the resulting templates once
# compiled by the TemplateLookup system.
# During development you generally don't need this option since paste's HTTP
# server will have access to you development directories, but in production
# you'll most certainly want to have apache or nginx to write in a directory
# that does not contain any source code in any form for obvious security
# reasons.  If disabled, None, False, or not writable, it will fall back
# to an in-memory cache.
templating.mako.compiled_templates_dir = %(here)s/data/templates

# Logging configuration
# Add additional loggers, handlers, formatters here
# Uses python's logging config file format
# http://docs.python.org/lib/logging-config-fileformat.html
[loggers]
keys = root, weather_fullstack, sqlalchemy, auth

[handlers]
keys = console

[formatters]
keys = generic

# If you create additional loggers, add them as a key to [loggers]
[logger_root]
level = INFO
handlers = console

[logger_weather_fullstack]
level = DEBUG
handlers =
qualname = weather_fullstack
[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)
# A logger for authentication, identification and authorization
# this is repoze.who:
[logger_auth]
level = WARN
handlers =
qualname = auth

# If you create additional handlers, add them as a key to [handlers]
[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

# If you create additional formatters, add them as a key to [formatters]
[formatter_generic]
format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
